// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Turquoise.Administration.Infrastructure.SQL;

namespace Turquoise.Administration.Infrastructure.SQL.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20210209193846_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("uuid-ossp")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Turquoise.Administration.Domain.Aggregation.Administrator.Administrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("CreationAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creationAt");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<Guid?>("RowGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("row_guid");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.ToTable("administrator", "user");
                });

            modelBuilder.Entity("Turquoise.Administration.Domain.Aggregation.Administrator.AdministratorPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("hash");

                    b.Property<Guid?>("RowGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("row_guid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.HasKey("Id");

                    b.ToTable("administrator_password", "user");
                });

            modelBuilder.Entity("Turquoise.Administration.Domain.Aggregation.Branch.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("code");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<Guid?>("RowGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("row_guid");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Turquoise.Administration.Domain.Aggregation.Choice.Choice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChoiceGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("choice_group_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("code");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("varchar(6)")
                        .HasColumnName("color");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Description")
                        .HasColumnType("varchar")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<Guid?>("RowGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("row_guid");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceGroupId");

                    b.ToTable("choice", "survey");
                });

            modelBuilder.Entity("Turquoise.Administration.Domain.Aggregation.ChoiceGroup.ChoiceGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("code");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<Guid?>("RowGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("row_guid");

                    b.HasKey("Id");

                    b.ToTable("choice_group", "survey");
                });

            modelBuilder.Entity("Turquoise.Administration.Domain.Aggregation.Doctor.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uuid")
                        .HasColumnName("branch_id");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("CreationAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creationAt");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<Guid?>("RowGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("row_guid");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("doctor", "user");
                });

            modelBuilder.Entity("Turquoise.Administration.Domain.Aggregation.Administrator.AdministratorPassword", b =>
                {
                    b.HasOne("Turquoise.Administration.Domain.Aggregation.Administrator.Administrator", "Administrator")
                        .WithOne("Password")
                        .HasForeignKey("Turquoise.Administration.Domain.Aggregation.Administrator.AdministratorPassword", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("Turquoise.Administration.Domain.Aggregation.Choice.Choice", b =>
                {
                    b.HasOne("Turquoise.Administration.Domain.Aggregation.ChoiceGroup.ChoiceGroup", "ChoiceGroup")
                        .WithMany("Choices")
                        .HasForeignKey("ChoiceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChoiceGroup");
                });

            modelBuilder.Entity("Turquoise.Administration.Domain.Aggregation.Doctor.Doctor", b =>
                {
                    b.HasOne("Turquoise.Administration.Domain.Aggregation.Branch.Branch", "Branch")
                        .WithMany("Doctors")
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Turquoise.Administration.Domain.Aggregation.Administrator.Administrator", b =>
                {
                    b.Navigation("Password");
                });

            modelBuilder.Entity("Turquoise.Administration.Domain.Aggregation.Branch.Branch", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Turquoise.Administration.Domain.Aggregation.ChoiceGroup.ChoiceGroup", b =>
                {
                    b.Navigation("Choices");
                });
#pragma warning restore 612, 618
        }
    }
}
